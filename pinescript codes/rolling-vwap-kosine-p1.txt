// @version=5
indicator("Rolling VWAP & Kosine Regression P1 [TradingMarketMist]", "R-VWAP & KR P1 [TradingMarketMist]", true, timeframe = "", timeframe_gaps = false)

import QuantraAI/QuantraMAs/2 as DynamicMA
import QuantraSystems/DynamicFunctions/1 as DynamicFunc


//              ╔═══════════════════════════╗              //
//              ║    USER DEFINED INPUTS    ║              //
//              ╚═══════════════════════════╝              //


var string RS   = "R͜͡oll-VWAP - Settings", var string RSU = "R͜͡oll-VWAP - UI"
Calculation     = "Determines the units used to calculate the distance of the bands. When 'Percentage' is selected, a multiplier of 1 means 1%."
src             = input.source(close,      "Source",                                 group = RS)
roll            = input.bool  (true,       "Use Rolling VWAP",                       group = RS,  tooltip = "Toggle to calculate VWAP with a rolling window based on the specified lookback period. Is not affected by timeframe usage.")
lookback        = input.int   (50,         "Lookback Length of VWAP",                group = RS)
tmframe         = input.bool  (false,      "Use Timeframe instead of Lookback",      group = RS,  tooltip = "Switch to a fixed timeframe (e.g., Daily, Weekly) for VWAP calculation instead of a lookback based on bars.")
vwapAnchorInput = input.string("Weekly",   "Anchor",                                 group = RS,  options = ["Daily", "Weekly", "Monthly", "Quarterly", "Yearly"])

calcModeInput   = input.string("Standard Deviation", "Bands Calculation Mode",       group = RS,  options = ["Standard Deviation", "Percentage"], tooltip = Calculation)
showBand_1      = input.bool  (true,       "",                                       group = RS,  inline = "band_1"                        )
bandMult_1      = input.float (1.0,        "Bands Multiplier #1",                    group = RS,  inline = "band_1",   step = 0.5, minval=0)
showBand_2      = input.bool  (true,       "",                                       group = RS,  inline = "band_2"                        )
bandMult_2      = input.float (2.0,        "Bands Multiplier #2",                    group = RS,  inline = "band_2",   step = 0.5, minval=0)
showBand_3      = input.bool  (false,      "",                                       group = RS,  inline = "band_3"                        )
bandMult_3      = input.float (3.0,        "Bands Multiplier #3",                    group = RS,  inline = "band_3",   step = 0.5, minval=0)

ColMode         = input.string("Modern",   "Color Palette Choice",                   group = RSU, inline  = "drop", options = ["Classic", "Modern", "Robust", "Accented", "Monochrome"])
man             = input.bool  (false,      "Custom Palette",                         group = RSU, inline  = "drop")
manUpC          = input.color (#00ff00,  "Custom Up",                              group = RSU, inline  = "man" ) 
manDnC          = input.color (#ff0000,  "Custom Down",                            group = RSU, inline  = "man" )
sig             = input.bool  (false,      "Show Trend Signals",                     group = RSU                  )
Fill            = input.bool  (true,       "Show Band Fill",                         group = RSU                  )

[UpC, DnC]       =  switch    ColMode
    "Classic"    => [#00E676, #880E4F]
    "Modern"     => [#5ffae0, #c22ed0]
    "Robust"     => [#ffbb00, #770737]
    "Accented"   => [#9618f7, #ff0078]
    "Monochrome" => [#dee2e6, #495057]


// Override with custom colors if manual palette is selected
[UpCol, DnCol]   =  switch     man
    false        => [UpC,      DnC   ]
    true         => [manUpC,   manDnC]

var   condition       = false
float vwapValue       = na
float upperBandValue1 = na
float lowerBandValue1 = na
float upperBandValue2 = na
float lowerBandValue2 = na
float upperBandValue3 = na
float lowerBandValue3 = na

if bar_index % lookback == 0
	condition := true
else 
    condition := false    
  
anchorTimeframe = switch vwapAnchorInput
    "Daily"     => "1D"
    "Weekly"    => "1W"
    "Monthly"   => "1M"
    "Quarterly" => "3M"
	"Yearly"    => "12M"
anchor = timeframe.change(anchorTimeframe)

calcVwVariance(src, length) =>
    maPrice    = DynamicMA.VWMA(src, length)
    sumVar     = DynamicMA.SMA(volume * math.pow(src - maPrice, 2), length)
    sumVolume  = DynamicMA.SMA(volume, length)
    vwVariance = sumVar / sumVolume
    vwStdDev   = math.sqrt(vwVariance)
    vwStdDev

rollingVwap = DynamicMA.VWMA(src, lookback)

[_vwap, _stdevUpper, _] = ta.vwap(src, tmframe ? anchor : condition, 1)
vwapValue       := roll? rollingVwap : _vwap
stdevAbs         = roll? calcVwVariance(src, lookback)  : _stdevUpper - _vwap
bandBasis        = calcModeInput == "Standard Deviation" ? stdevAbs : vwapValue * 0.01

// Trend Conditions
arrUp            = src > vwapValue and not (src[1] > vwapValue[1])
arrDn            = src < vwapValue and not (src[1] < vwapValue[1])

// Bands calculation
upperBandValue1 := vwapValue + bandBasis * bandMult_1
lowerBandValue1 := vwapValue - bandBasis * bandMult_1
upperBandValue2 := vwapValue + bandBasis * bandMult_2
lowerBandValue2 := vwapValue - bandBasis * bandMult_2
upperBandValue3 := vwapValue + bandBasis * bandMult_3
lowerBandValue3 := vwapValue - bandBasis * bandMult_3

sig_all = sig  ? display.all  : display.none
Band_1  = Fill ? display.none : showBand_1  ? display.all : display.none
Band_2  = Fill ? display.none : showBand_2  ? display.all : display.none
Band_3  = Fill ? display.none : showBand_3  ? display.all : display.none
Fill_1  = Fill and showBand_1 ? display.all : display.none
Fill_2  = Fill and showBand_2 ? display.all : display.none
Fill_3  = Fill and showBand_3 ? display.all : display.none

// Deviation Bands
upperBand_1 = plot     (upperBandValue1,  "Upper Band #1", DnCol,                                                                             display =  Band_1),
lowerBand_1 = plot     (lowerBandValue1,  "Lower Band #1", UpCol,                                                                             display =  Band_1),
upperBand_2 = plot     (upperBandValue2,  "Upper Band #2", DnCol,                                                                             display =  Band_2),
lowerBand_2 = plot     (lowerBandValue2,  "Lower Band #2", UpCol,                                                                             display =  Band_2),
upperBand_3 = plot     (upperBandValue3,  "Upper Band #3", DnCol,                                                                             display =  Band_3),
lowerBand_3 = plot     (lowerBandValue3,  "Lower Band #3", UpCol,                                                                             display =  Band_3),
// Signal Line
VWAP        = plot     (vwapValue,        "R͜͡oll-VWAP", src < vwapValue? DnCol : UpCol, 2),

              fill     (upperBand_1, VWAP, upperBandValue1, vwapValue, color.new(DnCol,75), color.new(chart.bg_color, 100), "Bands Fill #1",  display =  Fill_1),
              fill     (VWAP, lowerBand_1, vwapValue, lowerBandValue1, color.new(chart.bg_color, 100), color.new(UpCol,75), "Bands Fill #1",  display =  Fill_1),

              fill     (upperBand_2, VWAP, upperBandValue2, vwapValue, color.new(DnCol,50), color.new(chart.bg_color, 100), "Bands Fill #2",  display =  Fill_2),
              fill     (VWAP, lowerBand_2, vwapValue, lowerBandValue2, color.new(chart.bg_color, 100), color.new(UpCol,50), "Bands Fill #2",  display =  Fill_2),

              fill     (upperBand_3, VWAP, upperBandValue3, vwapValue, color.new(DnCol,25), color.new(chart.bg_color, 100), "Bands Fill #3",  display =  Fill_3),
              fill     (VWAP, lowerBand_3, vwapValue, lowerBandValue3, color.new(chart.bg_color, 100), color.new(UpCol,25), "Bands Fill #3",  display =  Fill_3),
// Plot Trend Signals
              plotshape(arrUp,            "Trend", shape.arrowup,   location.belowbar, UpCol, 0, "Up",   UpCol, size = size.auto,             display = sig_all),
              plotshape(arrDn,            "Trend", shape.arrowdown, location.abovebar, DnCol, 0, "Down", DnCol, size = size.auto,             display = sig_all),


symbol = "R͜͡oll-VWAP [QuantraAI] >>> {{exchange}}:{{ticker}}"

// Trend Following Alerts
alertcondition(arrUp, "Trend Up",   symbol + " Trend Following - Long Entry!"  )
alertcondition(arrDn, "Trend Down", symbol + " Trend Following - Short Entry!" )

if barstate.islast and ta.cum(volume) == 0
    runtime.error("No volume is provided by the data vendor.")
lc1=ta.crossover(src , vwapValue)
exitc1=ta.crossunder(src , vwapValue)
plotshape(lc1, title='Buy', text='long', style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.new(color.white, 0), size=size.tiny)
plotshape(exitc1, title='short', text='Sell', style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), size=size.tiny)