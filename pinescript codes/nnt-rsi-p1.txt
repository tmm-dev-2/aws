// @version=5
strategy("NNT RSI & Reversal [TradingMarketMist] P2", overlay = false)

import QuantraAI/QuantraMAs/2 as DynamicMA
import QuantraSystems/DynamicFunctions/1 as DynamicFunc




var string NS = "ɴɴᴛ ʀsɪ - Settings", var string NU = "ɴɴᴛ ʀsɪ - UI", var string COMP = "Compressed Signal Mode"
src           = input.source(close,             "Source",                                       group = NS  )
rsiLength     = input.int   (14,                "RSI Length",                                   group = NS  )
nnLength      = input.int   (5,                 "NN Smoothing Length",                          group = NS  )
sdLook        = input.int   (365,               "Standard Deviation Lookback",                  group = NS, tooltip = "Length of the SD bands lookback period") 
sdMult        = input.float (2,                 "Standard Deviation Extreme for OB/OS Border",  group = NS, tooltip = "Defines the outer border of the SD bands. \nThe inner border begins at 50% of the SD Multiplier", step = 0.5) 
useMean       = input.bool  (false,             "Use 50 as Mid Line",                           group = NS, tooltip = "Dynamic Mid Line")
 
DispV         = input.string("Hybrid",          "Display Variant",                              group = NU, options = ["Hybrid",  "Heikin Ashi",    "Classic"])
ColType       = input.string("Trend Following", "Choose Mode",                                  group = NU, options = ["None",    "Trend Following","Candles", "Extremes", "Reversals"], tooltip = "Signal Mode - Barcolor")
BCol          = input.bool  (true,              "Bar Coloring",                                 group = NU  )
ColMode       = input.string("Modern",          "Color Palette Choice",       inline = "drop",  group = NU, options = ["Classic", "Modern", "Robust", "Accented", "Monochrome"])
man           = input.bool  (false,             "Custom Palette",             inline = "drop",  group = NU  )
manUpC        = input.color (#00ff00,         "Custom Up",                  inline = "man",   group = NU  ) 
manDnC        = input.color (#ff0000,         "Custom Down",                inline = "man",   group = NU  )
Rev           = input.bool  (true,              "Show Reversion Signals - HA only",             group = NU  )

compress      = input.bool  (false,             "Compressed Mode",                              group = COMP)
labels        = input.bool  (true,              "Labels",                                       group = COMP)  
Reversal_B    = input.bool  (true,              "Reversion Line",                               group = COMP)
Trend_B       = input.bool  (true,              "Trend Line",                                   group = COMP)
Candles_B     = input.bool  (true,              "HA Candle Line",                               group = COMP)






//              ╔══════════════════════════╗              //
//              ║    COLOR DECLARATIONS    ║              //
//              ╚══════════════════════════╝              //


// Color assignment based on the selected palette
[UpC, DnC]       =  switch    ColMode
    "Classic"    => [#00E676, #880E4F]
    "Modern"     => [#5ffae0, #c22ed0]
    "Robust"     => [#ffbb00, #770737]
    "Accented"   => [#9618f7, #ff0078]
    "Monochrome" => [#dee2e6, #495057]


// Override with custom colors if manual palette is selected
[UpCol, DnCol]   =  switch     man
    false        => [UpC,      DnC   ]
    true         => [manUpC,   manDnC]




//  ╔════════════════════════════════╗  // 
//  ║           HEIKIN-ASHI          ║  // 
//  ║          BAR STRUCTURE         ║  // 
//  ╚════════════════════════════════╝  // 


type HA
    float o = na
    float h = na
    float l = na
    float c = na

// Function to calculate Heikin Ashi values
ha(o, h, l, c) =>
    var HA x = HA.new()
    x.c := (o + h + l + c) / 4
    x.o := na(x.o[1]) ? (o + c) / 2 : (nz(x.o[1]) + nz(x.c[1])) / 2
    x.h := math.max(h, math.max(x.o, x.c))
    x.l := math.min(l, math.min(x.o, x.c))
    x




//              ╔════════════════════════╗              //
//              ║   CORE CALCULATIONS    ║              //
//              ╚════════════════════════╝              //



//  ╔════════════════════════════════╗  //
//  ║        SIMPLE NN LOGIC         ║  //
//  ╚════════════════════════════════╝  //

// Base RSI Calculation
rsi1 = DynamicFunc.Rsi(src, rsiLength)

// Linear combination with weighted aggregation
var float[] inputs = array.new_float(nnLength, na)
for i = 0 to nnLength - 1
    array.set(inputs, i, rsi1[i])
nnOutput = 0.0
for i = 0 to nnLength - 1
    nnOutput := nnOutput + array.get(inputs, i) * (1 / nnLength)
    nnOutput

Mean  = DynamicMA.SMA(nnOutput, sdLook)
cross = useMean? 50 : Mean



//  ╔════════════════════════════════╗  //
//  ║        HA REPRESENTATION       ║  //
//  ╚════════════════════════════════╝  //

ha = ha(
     na(nnOutput[1]) ? nnOutput : nnOutput[1], 
     math.max(nnOutput, nnOutput[1]), 
     math.min(nnOutput, nnOutput[1]), 
     nnOutput)



//  ╔════════════════════════════════╗  //
//  ║      DYNAMIC OB/OS BANDS       ║  //
//  ╚════════════════════════════════╝  //

[_, u1, l1] = DynamicFunc.stdv_bands(nnOutput, sdLook, sdMult/2)
[_, u2, l2] = DynamicFunc.stdv_bands(nnOutput, sdLook, sdMult)






//              ╔══════════════════════════════╗              //
//              ║        VISUALIZATION         ║              //
//              ╚══════════════════════════════╝              //



//  ╔════════════════════════════════╗  //
//  ║         COLORING TYPE          ║  //
//  ╚════════════════════════════════╝  //

color col = switch ColType
    "None"              => na
    "Trend Following"   => (DispV != "Heikin Ashi"? nnOutput : ha.c) > cross? UpCol : DnCol
    "Candles"           => ha.c   > ha.o      ? UpCol : DnCol
    "Extremes"          => ha.c   > u2        ? DnCol : ha.c <l2? UpCol: color.gray 
    "Reversals"         => ha.h > u2 and ha.c < ha.o and not (ha.c[1] < ha.o[1]) ? DnCol : ha.l < l2 and ha.c > ha.o and not (ha.c[1] > ha.o[1]) ? UpCol : color.gray

// Determin HA colors
color HACol = switch
    ha.c > ha.o => UpCol
    ha.c < ha.o => DnCol



//  ╔════════════════════════════════╗  //
//  ║       FINAL PLOT + FILL        ║  //
//  ╚════════════════════════════════╝  //

// Define shared display settings
var all         = compress ? display.none : display.all
var price_scale = compress ? display.none : display.price_scale
var HAdisplay   = compress ? display.none : display.price_scale + display.pane


// Main Plots
pu1 = plot      (u1,      "1.𝓢𝓓 +",             color.new(DnCol, 70),                                                             display =         all)
pl1 = plot      (l1,      "1.𝓢𝓓 -",             color.new(UpCol, 70),                                                             display =         all)
pu2 = plot      (u2,      "2.𝓢𝓓 +",             color.new(DnCol, 70),                                                             display = price_scale)
pl2 = plot      (l2,      "2.𝓢𝓓 -",             color.new(UpCol, 70),                                                             display = price_scale)

pOut= plot      (DispV != "Heikin Ashi"? nnOutput : na, "ɴɴᴛ ʀsɪ", nnOutput > cross? UpCol : DnCol, DispV == "Hybrid"? 1 : 2,     display =         all)
mid = plot      (cross,   "𝓒𝓻𝓸𝓼𝓼𝓲𝓷𝓰 𝓛𝓲𝓷𝓮",   color.gray,                                                                      display =         all),
      fill      (mid, pOut, nnOutput, cross,    color.new(nnOutput > cross ? UpCol : DnCol, 50), color.new(chart.bg_color, 75),   display =         all), 
      fill      (pu1, pu2, u2, u1,              color.new(DnCol, 60), color.new(chart.bg_color, 75),                              display =         all),
      fill      (pl1, pl2, l2, l1,              color.new(UpCol, 60), color.new(chart.bg_color, 75),                              display =         all),

      // Plot Reversal Signals
      plotshape (DispV != "Classic" and Rev? ha.h > u2 and ha.c < ha.o and not (ha.c[1] < ha.o[1]) ? ha.h +5: na : na, 
                          "OB", shape.triangledown, location.absolute, DnCol, size = size.tiny,                                   display =         all),

      plotshape (DispV != "Classic" and Rev? ha.l < l2 and ha.c > ha.o and not (ha.c[1] > ha.o[1]) ? ha.l -5: na : na, 
                          "OS", shape.triangleup  , location.absolute, UpCol, size = size.tiny,                                   display =         all),

      // Plot Heikin-Ashi Representation
      plotcandle(DispV != "Classic"? ha.o : na, ha.h, ha.l, ha.c, 
                          "ɴɴᴛ ʀsɪ - HA",     color.new(color.white, 100), color.new(color.white, 100), bordercolor = HACol,  display =   HAdisplay), 

      // Bar Coloring
      barcolor  (BCol? col : na)






//              ╔══════════════════════════════╗              //
//              ║    COMPRESSED SIGNAL MODE    ║              //
//              ╚══════════════════════════════╝              //


trVal       = DispV != "Heikin Ashi"? nnOutput : ha.c

// Signal Colors
Trend_Col   = trVal > cross ? UpCol : DnCol
Candle_Col  = ha.c  >  ha.o ? UpCol : DnCol
OBOS        = color.from_gradient(ha.c, l2, u2, UpCol, DnCol)

// Signal Conditions
Extrema_Dn  = ha.c  > u2
Extrema_Up  = ha.c  < l2
Trend_Up    = trVal > cross              and not (trVal[1] > cross  )
Trend_Dn    = trVal < cross              and not (trVal[1] < cross  )
Candle_Up   = ha.c  > ha.o               and not ( ha.c[1] > ha.o[1])
Candle_Dn   = ha.c  < ha.o               and not ( ha.c[1] < ha.o[1])
Reversal_Dn = ha.h  > u2 and ha.c < ha.o and not ( ha.c[1] < ha.o[1])
Reversal_Up = ha.l  < l2 and ha.c > ha.o and not ( ha.c[1] > ha.o[1])


// Signal Plots
plot(2, "Reversions",    OBOS, 5, display = compress and Reversal_B ? display.all : display.none)
plot(1, "Trend",    Trend_Col, 5, display = compress and    Trend_B ? display.all : display.none)
plot(0, "Candles", Candle_Col, 5, display = compress and  Candles_B ? display.all : display.none)


// Mean Reversion Signal Line
if Reversal_Up and compress and Reversal_B
    label.new(bar_index, 2, "𝓡",  color = UpCol, style = label.style_label_down, tooltip = "Bullish Reversal", textcolor = #000000)
if Reversal_Dn and compress and Reversal_B
    label.new(bar_index, 2, "𝓡",  color = DnCol, style = label.style_label_down, tooltip = "Bearish Reversal", textcolor = #000000)


label R = na
label T = na
label C = na

// Corresponding labels for each line
if compress and labels
    if Reversal_B
        R := label.new(bar_index+ 5, 2, "Reversions", style = label.style_label_left, color = chart.fg_color, textcolor = chart.bg_color)
    if Trend_B
        T := label.new(bar_index+ 5, 1, "Trend",      style = label.style_label_left, color = chart.fg_color, textcolor = chart.bg_color)
    if Candles_B
        C := label.new(bar_index+ 5, 0, "Candles",    style = label.style_label_left, color = chart.fg_color, textcolor = chart.bg_color)


// Clean up labels
a_labels = array.from(R[1],T[1],C[1])
if array.size(a_labels) > 0
    for i = 0 to array.size(a_labels) - 1
        label.delete(array.get(a_labels, i))






//              ╔══════════════════════════════╗              //
//              ║     USER ALERT CONDITIONS    ║              //
//              ╚══════════════════════════════╝              //

symbol = "NNT RSI [QuantraAI] >>> {{exchange}}:{{ticker}}"

// Trend Following Alerts
alertcondition(Trend_Up   or Trend_Dn,   "Major Trend Shift",  symbol + " Major Trend Shift!"   )
alertcondition(Candle_Up  or Candle_Dn,  "HA Candle Change",   symbol + " HA Candle Change!"    )
alertcondition(Extrema_Up or Extrema_Dn, "OB/OS",              symbol + " Extreme OB/OS Zone!"  )
lc1= ta.crossover(ha.c,ha.o)
exitc1= ta.crossunder(ha.c,ha.o)
plotshape(lc1, title='Short term Long', text='st long', style=shape.labelup, location=location.bottom ,color=color.new(color.green, 0), textcolor=color.new(color.white, 0), size=size.tiny)
plotshape(exitc1, title='short term short', text='st Short', style=shape.labeldown, location=location.top, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), size=size.tiny)


    