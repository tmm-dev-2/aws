// @version=5
indicator("RSI volitality Bands & Filter P2 [TradingMarketMist]", "Rsi VB & VF P2 [TradingMarketMist]", false)

import QuantraAI/QuantraMAs/2 as DynamicMA
import QuantraSystems/DynamicFunctions/1 as DynamicFunc

var GRP0 = "Normalization/Sensitivity Length",      var GRP3 = "Linear Regression Dispersion"
var GRP1 = "Modified Damiani Voltmeter",            var GRP4 = "Visualization"
var GRP2 = "Average Directional Index",             var COMP = "Compressed Signal Mode"
var SeTT = "A shorter period increases sensitivity"

NormSens   = input.int   (10,           "Speed",                       group = GRP0, tooltip = SeTT)

vis_atr    = input.int   (13,           "Base ATR Length",             group = GRP1)
sed_atr    = input.int   (40,           "Second ATR Length",           group = GRP1)
vis_std    = input.int   (20,           "Base StdDev",                 group = GRP1)
sed_std    = input.int   (100,          "Second StdDev",               group = GRP1)

adxlen     = input.int   (14,           "ADX Smoothing",               group = GRP2)
dilen      = input.int   (14,           "DI Length",                   group = GRP2)
adxbase    = input.int   (25,           "ADX Baseline",                group = GRP2)

period     = input.int   (20,           "Regression Length",           group = GRP3)
TrSens     = input.int   (350,          "Regression Sensitivity",      group = GRP3)

BCol       = input.bool  (false,        "Bar Coloring",                group = GRP4)
display    = input.string("Crosses",    "Display Type",                group = GRP4,                  options = ["Crosses", "Histogram"])
ColMode    = input.string("Modern",     "Color Palette Choice",        group = GRP4, inline = "Drop", options = ["Classic", "Modern", "Robust", "Accented", "Monochrome"])
man        = input.bool  (false,        "Custom Palette",              group = GRP4, inline = "Drop")
manUpC     = input.color (#00ff00,    "Custom Rising Volatility",    group = GRP4) 
manDnC     = input.color (#ff0000,    "Custom Falling Volatility",   group = GRP4)

compress   = input.bool  (false,        "Compressed Mode",             group = COMP)
labels     = input.bool  (true,         "Labels",                      group = COMP)   
Volatil_B  = input.bool  (true,         "Signal Line",                 group = COMP)

[UpC, DnC]       =  switch    ColMode
    "Classic"    => [#00E676, #880E4F]
    "Modern"     => [#5ffae0, #c22ed0]
    "Robust"     => [#ffbb00, #770737]
    "Accented"   => [#9618f7, #ff0078]
    "Monochrome" => [#dee2e6, #495057]

// Override with custom colors if manual palette is selected
[UpCol, DnCol]   =  switch     man
    false        => [UpC,      DnC   ]
    true         => [manUpC,   manDnC]

DV(src, vis_atr, vis_std, sed_atr, sed_std) =>
    vis_atrx  = math.min(vis_atr, bar_index+1),
    vis_stdx  = math.min(vis_std, bar_index+1),
    sed_atrx  = math.min(sed_atr, bar_index+1),
    sed_stdx  = math.min(sed_std, bar_index+1),
          vol = 0.0,
      lag_s_K = 0.5,
           s1 = nz(vol[1], 0),
           s3 = nz(vol[3], 0),
         vol := DynamicFunc.Atr(vis_atrx) / DynamicFunc.Atr(sed_atrx) + lag_s_K * (s1 - s3),
    anti_thre = DynamicFunc.dynamicStdev(src, vis_stdx) / DynamicFunc.dynamicStdev(src, sed_stdx),
           th = 1.4 - anti_thre,
          th := th - vol,
    
          -th * 100

dispersion(period, TrSens) =>
    // Dynamic adjustment of the lookback period based on available data
    actualPeriod = math.min (period, bar_index  + 1),
      linRegLine = ta.linreg(close, actualPeriod, 0),
             tes = DynamicFunc.dynamicStdev(close - linRegLine, period)
    
    (tes - DynamicFunc.dynamicMedian(tes, TrSens)) / 2

scale(x, a, b, c, d) =>
    //   Where 
    //       x = value
    //  [a, b] = old range
    //  [c, d] = new range
    c + (d - c)*(x - a) / (b - a)

normalize(currentValue, targetMin, targetMax, window) =>
                    
    dynamicLen =    math.min(window,   1 + bar_index )                       
    minValue   =   ta.lowest(currentValue, dynamicLen)                      
    maxValue   =  ta.highest(currentValue, dynamicLen)                     
    minNew     =    math.min(currentValue, minValue  )                       
    maxNew     =    math.max(currentValue, maxValue  )                      
                                                                        
    output     = scale(currentValue, minNew, maxNew, targetMin, targetMax) 
    minValue  != maxValue ? nz(output) : nz(currentValue)

dvm = DV(close, vis_atr, vis_std, sed_atr, sed_std)
sig = (DynamicFunc.Adx(dilen, adxlen) - adxbase) * 3
dis = dispersion(period, TrSens)

dvm := normalize(dvm, -100, 100, NormSens*10)
sig := normalize(sig, -100, 100, NormSens*10)
dis := normalize(dis, -100, 100, NormSens*10)

// Ingore 'na' values when calculating the mean
mean(_dvm, _sig, _dis) =>
    float sum = 0
    int count = 0

    if not na(dvm)
        sum   += dvm
        count += 1
    if not na(sig)
        sum   += sig
        count += 1
    if not na(dis)
        sum   += dis
        count += 1
    count > 0 ? sum / count : 0


// Calculate the mean
av  = mean(dvm, sig, dis)

// And the color
clr = av > 0 ? av > av[1] ? UpCol : DnCol : av < 0 ? av < av[1] ? color.gray : color.new(color.gray, 50) : na

// Display Variant
disp = switch display
    "Crosses"   => plot.style_cross
    "Histogram" => plot.style_histogram

// Main Plots
pav = plot(av, "Average Volatility", clr,  2, disp, style = plot.style_linebr)
p0  = plot(0,           "Zero Line", color.white, 1)

// Fill Effect
fill(p0, pav, av, 0, color.new (clr, 70), color.new(chart.bg_color, 90), display = compress? display.none : display.all) 

barcolor(BCol ? clr : na)

// Define the volatility conditions
volatile = av > 0
muted    = av < 0

var symbol = "Scalper's Volatility Filter [QuantraAI] >>> {{exchange}}:{{ticker}}"

alertcondition(ta.change(volatile), "Volatility Shift", symbol + " - Volatility Shift!")

// Signal Line
plot(0, "Signal", clr, 2 )

// Plot Labels
label S = na
if compress and labels and Volatil_B
    S := label.new(bar_index+ 5, 0, "Volatility", style = label.style_label_left, color = chart.fg_color, textcolor = chart.bg_color)

// Clean up labels
a_labels = array.from(S[1])
if array.size(a_labels) > 0
    for i = 0 to array.size(a_labels) - 1
        label.delete(array.get(a_labels, i))
