// @version=5
indicator("RSI volitality Bands & Filter P1 [TradingMarketMist]", "RSI VB & VF P1 [TradingMarketMist]", true, max_bars_back = 500, max_labels_count = 500, max_polylines_count = 100)

import QuantraAI/QuantraMAs/2 as DynamicMA
import QuantraSystems/DynamicFunctions/1 as DynamicFunc
var string RS = "Trend Bands WIP - Settings", var string RSU = "Trend Bands WIP - UI"
src        = input.source(close,        "Source",                                         group = RS )
rsiLength  = input.int   (10,           "RSI Length",                                     group = RS )
rsiMA      = input.string("EMA",        "RSI Smoothing MA: - Type",                       group = RS,  options = ["SMA", "EMA", "DEMA", "TEMA", "WMA", "VWMA", "SMMA", "HMA", "LSMA", "ALMA"])
bandMA     = input.string("EMA",        "Bandwidth: - Type",                              group = RS,  options = ["SMA", "EMA", "DEMA", "TEMA", "WMA", "VWMA", "SMMA", "HMA", "LSMA", "ALMA"])
bandLength = input.int   (30,           "Bandwidth: - Length",                            group = RS )
smooth     = input.int   (10,           "Bandwidth: - Smooth",                            group = RS )

BCol       = input.bool  (true,         "Bar Coloring",                                   group = RSU)
BandFill   = input.bool  (true,         "Band Shading",                                   group = RSU)
Signals    = input.bool  (true,         "Show Signals",                                   group = RSU)
ColType    = input.string("Signal",     "Choose Mode for Coloring",                       group = RSU, options = ["Neutral", "Signal"])
ColMode    = input.string("Modern",     "Color Palette Choice",       inline = "Drop",    group = RSU, options = ["Classic", "Modern", "Robust", "Accented", "Monochrome"])
man        = input.bool  (false,        "Custom Palette",             inline = "Drop",    group = RSU)
manUpC     = input.color (#00ff00,    "Custom Rising Volatility",                       group = RSU) 
manDnC     = input.color (#ff0000,    "Custom Falling Volatility",                      group = RSU)

// Color assignment based on the selected palette
[UpC, DnC]       =  switch    ColMode
    "Classic"    => [#00E676, #880E4F]
    "Modern"     => [#5ffae0, #c22ed0]
    "Robust"     => [#ffbb00, #770737]
    "Accented"   => [#9618f7, #ff0078]
    "Monochrome" => [#dee2e6, #495057]

// Override with custom colors if manual palette is selected
[UpCol, DnCol]   =  switch     man
    false        => [UpC,      DnC   ]
    true         => [manUpC,   manDnC]

ma(type, src, len) =>
    float result = na
    if type == "SMA"  
        result := DynamicMA.SMA(src, len)
        result
    else if type == "EMA"  
        result := DynamicMA.EMA(src, len)
        result
    else if type == "DEMA"  
        result := DynamicMA.DEMA(src, len)
        result
    else if type == "TEMA"  
        result := DynamicMA.TEMA(src, len)
        result
    else if type == "WMA"  
        result := DynamicMA.WMA(src, len)
        result
    else if type == "VWMA"
        result := DynamicMA.VWMA(src, len)
        result
    else if type == "SMMA"
        result := DynamicMA.SMMA(src, len)
        result
    else if type == "HMA"  
        result := DynamicMA.HMA(src, len)
        result
    else if type == "LSMA"
        result := DynamicMA.LSMA(src, len)
        result
    else if type == "ALMA"
        result := DynamicMA.ALMA(src, len, 0, 6)
        result
    result

rsiVal       = DynamicFunc.Rsi(close,  rsiLength)
rsiEma       = ma(rsiMA,  rsiVal,  bandLength)
bandwidth    = ma(bandMA, math.abs(rsiVal -   rsiEma), bandLength)
upperBand    = ma(bandMA, rsiEma + bandwidth, smooth)
lowerBand    = ma(bandMA, rsiEma - bandwidth, smooth)
atrValue     = DynamicFunc.Atr(rsiLength) * 1.7

QuantraUpper = close + atrValue
QuantraLower = close - atrValue

long =      upperBand > 50 and not (lowerBand < lowerBand[1] and lowerBand < 50)
short= not (upperBand > 50 and not (lowerBand < lowerBand[1] and lowerBand < 50))

color col = switch ColType
    "Neutral" => color.gray
    "Signal"  => upperBand > 50 and not (lowerBand < lowerBand[1] and lowerBand < 50) ? UpCol: DnCol

color inverseCol = switch ColType
    "Neutral" => color.gray
    "Signal"  => upperBand > 50 and not (lowerBand < lowerBand[1] and lowerBand < 50) ? DnCol: UpCol

var points = array.new<chart.point>()

draw(p1, p2, clr) =>
    Points = array.new<chart.point>()
    Points.push(p1)
    Points.push(p2)
    Signals ? polyline.new(Points, false, false, xloc.bar_time, clr, line_style = line.style_dotted) : na

// Define shared display settings
windowPane =    display.data_window  + display.pane
BandAll    = BandFill ? display.all  : display.none
None       =                           display.none

Band  =  plot    (long? QuantraLower : short? QuantraUpper : na, "Bands",   col, 1,                                          display = windowPane)
Band2 =  plot    (long? QuantraUpper : short? QuantraLower : na, "Bands 2", color.new(inverseCol, 50), 1,                    display = windowPane)
Price =  plot    (close,                                                                                                     display =       None),
         fill    (Band, Price, long ? close : QuantraUpper, long? QuantraLower : close, long? color.new(chart.bg_color,60) : 
                  color.new(col, 60), long? color.new(col, 60) : color.new(chart.bg_color,60),                               display =    BandAll),
         barcolor(BCol? col: na)

if long and short[1] and Signals
    label.new(time, QuantraLower, '﴾B̤̈ LONG﴿', xloc.bar_time,  style = label.style_label_up,   
              color = color.new(UpCol, 100), textcolor = UpCol, size = size.normal    )

    // Store point for a long signal
    points.push(chart.point.from_time(time, QuantraLower))

if short and long[1] and Signals
    label.new(time, QuantraUpper, '﴾S̤̈ SHORT﴿', xloc.bar_time,  style = label.style_label_down,
              color = color.new(DnCol, 100), textcolor = DnCol, size = size.normal     )

    // Store point for a short signal
    points.push(chart.point.from_time(time, QuantraUpper))

// Draw connection lines between signal points
if array.size(points) > 2
    for i = 1 to array.size(points) - 1
        draw(array.get(points, i - 1), array.get(points, i), i % 2 == 0 ? UpCol : DnCol)

// Maintain a manageable size of the points array to avoid performance issues
if array.size(points) > 450
    points.shift()

symbol = "RSI Volatility Bands [QuantraAI] >>> {{exchange}}:{{ticker}}"
up     = long and short[1]
dn     = short and long[1]

alertcondition(up, "Long Entry",  symbol + " - Long Entry!"  )
alertcondition(dn, "Short Entry", symbol + " - Short Entry!" )