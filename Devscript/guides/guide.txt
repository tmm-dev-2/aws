**1. Lexical Analysis (Lexer)**:
Create a lexer that breaks down your source code into individual tokens, such as keywords, identifiers, literals, and 
symbols. You can use tools like ANTLR or write your own lexer in Python using regular expressions.

**2. Syntax Analysis (Parser)**:
Build a parser to analyze the token stream generated by the lexer and ensure it conforms to the language's syntax rules. This      
is where you'll define the grammar of your language. You can use tools like ANTLR, yacc, or write your own parser in Python        
using recursive descent parsing.

**3. Abstract Syntax Tree (AST) Generation**:
Create an AST from the parsed syntax tree. The AST represents the source code as a hierarchical structure, making it easier        
to analyze and optimize.

**4. Interpreter/Compiler**:
Your existing `interpreter.py` file is a good start! This component takes the AST as input and generates machine code or
executes the program directly. You may need to add support for more advanced features like loops, conditionals, functions,         
and modules.

**5. Runtime Environment**:
Provide a runtime environment that loads and executes your language's programs. This includes setting up memory management         
(e.g., garbage collection), handling errors and exceptions, and managing input/output operations.

**6. Tools and Utilities**:
Develop tools to help users write, debug, and optimize their code in your new language. These might include:

* **IDE Integration**: Create an Integrated Development Environment (IDE) that supports syntax highlighting, code completion,      
debugging, and project management.
* **Syntax Highlighting Plugin**: Develop a plugin for popular text editors like Sublime Text, Visual Studio Code, or Atom to      
provide syntax highlighting for your language.
* **Code Formatter**: Create a tool that formats user code according to the language's rules.

**7. Documentation and Community Support**:
Create comprehensive documentation for your language, including tutorials, guides, and API references. Establish an online
community (e.g., GitHub repository, forum) where users can share knowledge, ask questions, and contribute to the development
of your language.

**Additional Considerations**

* **Error Handling**: Implement robust error handling mechanisms to provide meaningful error messages and help users diagnose
issues.
* **Performance Optimization**: Optimize your interpreter/compiler for performance, using techniques like caching,
memoization, or just-in-time compilation.
* **Extensions and Libraries**: Develop a framework for creating extensions and libraries in your language, making it easier
for users to build custom modules.

**Next Steps**

1. Refactor your `interpreter.py` file to separate concerns (e.g., parsing, AST generation, execution).
2. Implement lexical analysis using ANTLR or write your own lexer.
3. Develop a parser using ANTLR or recursive descent parsing.
4. Create an Abstract Syntax Tree (AST) generator and integrate it with the interpreter/compiler.
5. Implement error handling and exception mechanisms.

By following these steps, you'll be well on your way to creating a functional programming language like PineScript! Good luck!