"use client"


import { useEffect, useRef, useState, useLayoutEffect } from 'react'
import { createChart, ColorType, IChartApi, LineStyle, ISeriesApi, SeriesOptions, MouseEventParams } from 'lightweight-charts';
import { DoubleHullTurboP1Chart } from '../strategies/double-hull-turbo-p1/double-hull-turbo-p1';
import { KernelRegressionChart } from '../strategies/kernel-regression-p1/kernel-regression-p1';
import { DrawingTools } from './drawing-tools';
import { SymbolSearch } from '../components/SymbolSearch';
import { ChevronDown } from 'lucide-react';


import { TrendLine, Ray, ExtendedLine, TrendAngle, HorizontalLine, VerticalLine, CrossLine, LineSegment } from '../drawing-logic-tsx/lines'
import { Pitchfork, SchiffPitchfork } from '../drawing-logic-tsx/pitchfork'
import { ParallelChannel, FlatTopBottomChannel, DisjointedChannel } from '../drawing-logic-tsx/channels'
import { drawCyclicLines, drawTimeCycles, drawSineLine } from '../drawing-logic-tsx/cycles'
import { GannBox, GannSquareFixed, GannFan } from '../drawing-logic-tsx/gann'
import { drawElliotImpulseWave, drawElliotCorrectionWave, drawElliotTriangleWave, WaveResult } from '../drawing-logic-tsx/elliot-wave'
import { ArrowMarker, Arrow, ArrowMarkUp, ArrowMarkDown } from '../drawing-logic-tsx/arrows'
import { Brush, Highlighter } from '../drawing-logic-tsx/brushes'
import { rectangle, rotatedRectangle, ellipse } from '../drawing-logic-tsx/shapes'
import { calculateLongPosition, calculateShortPosition, calculateForecast } from '../drawing-logic-tsx/projection'
import { calculatePriceRange, calculateDataRange, calculateDataPriceRange } from '../drawing-logic-tsx/measurer'


interface CandleData {
Â  time: number;
Â  open: number;
Â  high: number;
Â  low: number;
Â  close: number;
Â  volume: number;
}


interface MainChartProps {
Â  symbol: string;
Â  selectedPeriod: string;
Â  selectedStrategy: string;
Â  data?: CandleData[];
}


interface MainChartContainerProps {
Â  layout: string;
Â  symbols: string[];
Â  selectedPeriod: string;
Â  selectedStrategy: string;
}


interface ChartInstanceProps {
Â  symbol: string;
Â  selectedPeriod: string;
Â  selectedStrategy: string;
Â  index: number;
}


const layoutOptions = [
Â  { id: 'single', name: 'Single View', grid: 'grid-cols-1 grid-rows-1' },
Â  { id: 'horizontal-2', name: '2 Charts Horizontal', grid: 'grid-cols-2 grid-rows-1' },
Â  { id: 'vertical-2', name: '2 Charts Vertical', grid: 'grid-cols-1 grid-rows-2' },
Â  { id: 'triple', name: '3 Charts', grid: 'grid-cols-2 grid-rows-2' },
Â  { id: 'quad', name: '4 Charts', grid: 'grid-cols-2 grid-rows-2' },
Â  { id: 'horizontal-3', name: '3 Charts Horizontal', grid: 'grid-cols-3 grid-rows-1' },
Â  { id: 'vertical-3', name: '3 Charts Vertical', grid: 'grid-cols-1 grid-rows-3' }
];


const getGridClass = (layout: string) => {
Â  const layoutOption = layoutOptions.find(l => l.id === layout);
Â  return layoutOption?.grid || 'grid-cols-1 grid-rows-1';
};


const ChartInstance: React.FC<ChartInstanceProps> = ({ symbol, selectedPeriod, selectedStrategy, index }) => {
Â  const chartRef = useRef<IChartApi | null>(null);
Â  const seriesRef = useRef<ISeriesApi<'candlestick'> | null>(null);
Â  const chartContainerRef = useRef<HTMLDivElement>(null);
Â  const [chartData, setChartData] = useState<CandleData[]>([]);
Â  const [ohlcv, setOhlcv] = useState({
Â  Â  open: 0,
Â  Â  high: 0,
Â  Â  low: 0,
Â  Â  close: 0,
Â  Â  volume: 0
Â  });
Â  const [showSearch, setShowSearch] = useState(false);
Â  const [currentSymbol, setCurrentSymbol] = useState(symbol);
Â  const [currentData, setCurrentData] = useState<CandleData[]>([]);
Â  const [currentOHLCV, setCurrentOHLCV] = useState({
Â  Â  open: 0,
Â  Â  high: 0,
Â  Â  low: 0,
Â  Â  close: 0,
Â  Â  volume: 0,
Â  Â  time: 0
Â  });
Â  const [previousOHLCV, setPreviousOHLCV] = useState({
Â  Â  open: 0,
Â  Â  high: 0,
Â  Â  low: 0,
Â  Â  close: 0,
Â  Â  volume: 0
Â  });
Â  const [searchResults, setSearchResults] = useState<Array<{ symbol: string, name: string }>>([]);
Â  const [searchQuery, setSearchQuery] = useState('');
Â  const [analysisResults, setAnalysisResults] = useState(null);


Â  const fetchCandleData = async (sym: string) => {
Â  Â  try {
Â  Â  Â  const response = await fetch(
Â  Â  Â  Â  `http://localhost:5000/fetch_candles?symbol=${sym}&timeframe=${selectedPeriod}`
Â  Â  Â  );
Â  Â  Â  if (!response.ok) throw new Error('Failed to fetch data');
Â  Â  Â 
Â  Â  Â  const data = await response.json();
Â  Â  Â  console.log(`Received data for ${sym}:`, data);
Â  Â  Â 
Â  Â  Â  if (data && Array.isArray(data)) {
Â  Â  Â  Â  setCurrentData(data);
Â  Â  Â  Â  updateChart(data);
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error fetching candle data:', error);
Â  Â  }
Â  };


Â  const handleSymbolSearch = async (query: string) => {
Â  Â  if (query.length < 2) return;
Â  Â 
Â  Â  try {
Â  Â  Â  const response = await fetch(`http://localhost:5000/get_stock_suggestions?query=${query}`);
Â  Â  Â  const data = await response.json();
Â  Â  Â  setSearchResults(data);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error fetching suggestions:', error);
Â  Â  }
Â  };


Â  const handleSymbolSelect = async (newSymbol: string) => {
Â  Â  try {
Â  Â  Â  const response = await fetch(
Â  Â  Â  Â  `http://localhost:5000/fetch_candles?symbol=${newSymbol}&timeframe=${selectedPeriod}`
Â  Â  Â  );
Â  Â  Â  const data = await response.json();
Â  Â  Â  setCurrentSymbol(newSymbol);
Â  Â  Â  setCurrentData(data);
Â  Â  Â  updateChart(data);
Â  Â  Â  setShowSearch(false);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error fetching candle data:', error);
Â  Â  }
Â  };


Â  const updateChart = (data: CandleData[]) => {
Â  Â  if (!seriesRef.current) return;


Â  Â  const formattedData = data.map(candle => ({
Â  Â  Â  time: candle.time / 1000,
Â  Â  Â  open: candle.open,
Â  Â  Â  high: candle.high,
Â  Â  Â  low: candle.low,
Â  Â  Â  close: candle.close
Â  Â  }));


Â  Â  seriesRef.current.setData(formattedData);


Â  Â  if (data.length > 0) {
Â  Â  Â  const latest = data[data.length - 1];
Â  Â  Â  setCurrentOHLCV({
Â  Â  Â  Â  open: latest.open,
Â  Â  Â  Â  high: latest.high,
Â  Â  Â  Â  low: latest.low,
Â  Â  Â  Â  close: latest.close,
Â  Â  Â  Â  volume: latest.volume,
Â  Â  Â  Â  time: latest.time
Â  Â  Â  });
Â  Â  }
Â  };


Â  useEffect(() => {
Â  Â  fetchCandleData(currentSymbol);
Â  }, [currentSymbol, selectedPeriod]);


Â  useEffect(() => {
Â  Â  if (!chartContainerRef.current) return;


Â  Â  const chart = createChart(chartContainerRef.current, {
Â  Â  Â  width: chartContainerRef.current.clientWidth,
Â  Â  Â  height: chartContainerRef.current.clientHeight,
Â  Â  Â  layout: {
Â  Â  Â  Â  background: { color: '#1A1A1A' },
Â  Â  Â  Â  textColor: '#d1d4dc',
Â  Â  Â  },
Â  Â  Â  rightPriceScale: {
Â  Â  Â  Â  visible: true,
Â  Â  Â  Â  borderColor: '#2a2e39',
Â  Â  Â  Â  scaleMargins: {
Â  Â  Â  Â  Â  top: 0.1,
Â  Â  Â  Â  Â  bottom: 0.1,
Â  Â  Â  Â  },
Â  Â  Â  },
Â  Â  Â  grid: {
Â  Â  Â  Â  vertLines: { color: 'rgba(42, 46, 57, 0.5)' },
Â  Â  Â  Â  horzLines: { color: 'rgba(42, 46, 57, 0.5)' },
Â  Â  Â  },
Â  Â  Â  timeScale: {
Â  Â  Â  Â  timeVisible: true,
Â  Â  Â  Â  secondsVisible: false,
Â  Â  Â  },
Â  Â  });


Â  Â  const candleSeries = chart.addCandlestickSeries({
Â  Â  Â  priceScaleId: 'right',
Â  Â  Â  scaleMargins: {
Â  Â  Â  Â  top: 0.1,
Â  Â  Â  Â  bottom: 0.1,
Â  Â  Â  },
Â  Â  });


Â  Â  chartRef.current = chart;
Â  Â  seriesRef.current = candleSeries;


Â  Â  return () => {
Â  Â  Â  chart.remove();
Â  Â  };
Â  }, []);


Â  useEffect(() => {
Â  Â  if (!chartContainerRef.current || !chartRef.current) return;


Â  Â  const handleResize = () => {
Â  Â  Â  const parent = chartContainerRef.current?.parentElement;
Â  Â  Â  if (parent && chartRef.current) {
Â  Â  Â  Â  chartRef.current.resize(
Â  Â  Â  Â  Â  parent.clientWidth,
Â  Â  Â  Â  Â  parent.clientHeight
Â  Â  Â  Â  );
Â  Â  Â  }
Â  Â  };


Â  Â  const resizeObserver = new ResizeObserver(handleResize);
Â  Â  resizeObserver.observe(chartContainerRef.current);


Â  Â  chartContainerRef.current.addEventListener('resize', handleResize);


Â  Â  return () => {
Â  Â  Â  resizeObserver.disconnect();
Â  Â  Â  chartContainerRef.current?.removeEventListener('resize', handleResize);
Â  Â  };
Â  }, []);


Â  useEffect(() => {
Â  Â  if (!chartRef.current) return;


Â  Â  const handleAnalysis = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  const response = await fetch(`http://localhost:5000/analyze?symbol=${currentSymbol}`);
Â  Â  Â  Â  if (!response.ok) throw new Error('Analysis failed');
Â  Â  Â  Â  const data = await response.json();
Â  Â  Â  Â  setAnalysisResults(data);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Analysis error:', error);
Â  Â  Â  }
Â  Â  };


Â  Â  const codeLlamaIcon = document.createElement('div');
Â  Â  codeLlamaIcon.innerHTML = 'ðŸ¤–';
Â  Â  codeLlamaIcon.style.position = 'absolute';
Â  Â  codeLlamaIcon.style.top = '10px';
Â  Â  codeLlamaIcon.style.left = '10px';
Â  Â  codeLlamaIcon.style.fontSize = '20px';
Â  Â  codeLlamaIcon.style.cursor = 'pointer';
Â  Â  codeLlamaIcon.style.zIndex = '1000';
Â  Â  codeLlamaIcon.title = 'Technical Analysis';
Â  Â  codeLlamaIcon.onclick = handleAnalysis;


Â  Â  chartContainerRef.current?.appendChild(codeLlamaIcon);


Â  Â  return () => {
Â  Â  Â  codeLlamaIcon?.remove();
Â  Â  };
Â  }, [currentSymbol]);


Â  useEffect(() => {
Â  Â  if (!chartRef.current || !seriesRef.current) return;


Â  Â  const handleCrosshairMove = (param: MouseEventParams) => {
Â  Â  Â  if (!param.time) return;


Â  Â  Â  const timestamp = param.time * 1000;
Â  Â  Â  const candleIndex = currentData.findIndex(d => d.time === timestamp);
Â  Â  Â 
Â  Â  Â  if (candleIndex !== -1) {
Â  Â  Â  Â  const currentCandle = currentData[candleIndex];
Â  Â  Â  Â  const previousCandle = candleIndex > 0 ? currentData[candleIndex - 1] : currentCandle;


Â  Â  Â  Â  setCurrentOHLCV({
Â  Â  Â  Â  Â  open: currentCandle.open,
Â  Â  Â  Â  Â  high: currentCandle.high,
Â  Â  Â  Â  Â  low: currentCandle.low,
Â  Â  Â  Â  Â  close: currentCandle.close,
Â  Â  Â  Â  Â  volume: currentCandle.volume,
Â  Â  Â  Â  Â  time: timestamp
Â  Â  Â  Â  });


Â  Â  Â  Â  setPreviousOHLCV({
Â  Â  Â  Â  Â  open: previousCandle.open,
Â  Â  Â  Â  Â  high: previousCandle.high,
Â  Â  Â  Â  Â  low: previousCandle.low,
Â  Â  Â  Â  Â  close: previousCandle.close,
Â  Â  Â  Â  Â  volume: previousCandle.volume
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  };


Â  Â  chartRef.current.subscribeCrosshairMove(handleCrosshairMove);


Â  Â  return () => {
Â  Â  Â  if (chartRef.current) {
Â  Â  Â  Â  chartRef.current.unsubscribeCrosshairMove(handleCrosshairMove);
Â  Â  Â  }
Â  Â  };
Â  }, [currentData]);


Â  const getValueColor = (current: any) => {
Â  Â  const isCandleGreen = current.close > current.open;
Â  Â  return isCandleGreen ? 'text-green-500' : 'text-red-500';
Â  };


Â  const getVolumeColor = (current: any, previous: any) => {
Â  Â  const isPriceUp = current.close > current.open;
Â  Â  return isPriceUp ? 'text-green-500' : 'text-red-500';
Â  };


Â  return (
Â  Â  <div className="flex flex-col h-full border border-[#2a2e39]">
Â  Â  Â  <div className="px-3 py-2 border-b border-[#2a2e39] flex items-center justify-between">
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  className="flex items-center gap-2 cursor-pointer hover:bg-[#2a2e39] p-1 rounded"
Â  Â  Â  Â  Â  onClick={() => setShowSearch(true)}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <span className="font-bold">{currentSymbol}</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="flex items-center gap-3 text-xs">
Â  Â  Â  Â  Â  <span className={getValueColor(currentOHLCV)}>
Â  Â  Â  Â  Â  Â  O: {currentOHLCV.open.toFixed(2)}
Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  <span className={getValueColor(currentOHLCV)}>
Â  Â  Â  Â  Â  Â  H: {currentOHLCV.high.toFixed(2)}
Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  <span className={getValueColor(currentOHLCV)}>
Â  Â  Â  Â  Â  Â  L: {currentOHLCV.low.toFixed(2)}
Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  <span className={getValueColor(currentOHLCV)}>
Â  Â  Â  Â  Â  Â  C: {currentOHLCV.close.toFixed(2)}
Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  <span className={getVolumeColor(currentOHLCV, previousOHLCV)}>
Â  Â  Â  Â  Â  Â  V: {currentOHLCV.volume.toLocaleString()}
Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  Â  <div ref={chartContainerRef} className="flex-1 chart-instance" />
Â  Â  Â 
Â  Â  Â  {analysisResults && (
Â  Â  Â  Â  <div className="absolute top-12 right-4 bg-[#2D2D2D] p-4 rounded shadow-lg max-w-md">
Â  Â  Â  Â  Â  <h3 className="text-sm font-bold mb-2">Analysis Results</h3>
Â  Â  Â  Â  Â  <pre className="text-xs overflow-auto max-h-60">
Â  Â  Â  Â  Â  Â  {JSON.stringify(analysisResults, null, 2)}
Â  Â  Â  Â  Â  </pre>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  Â 
Â  Â  Â  <SymbolSearch
Â  Â  Â  Â  isOpen={showSearch}
Â  Â  Â  Â  onClose={() => setShowSearch(false)}
Â  Â  Â  Â  onSymbolSelect={(newSymbol) => {
Â  Â  Â  Â  Â  setCurrentSymbol(newSymbol);
Â  Â  Â  Â  Â  fetchCandleData(newSymbol);
Â  Â  Â  Â  Â  setShowSearch(false);
Â  Â  Â  Â  }}
Â  Â  Â  />
Â  Â  </div>
Â  );
};


export const MainChartContainer: React.FC<MainChartContainerProps> = ({
Â  layout,
Â  symbols,
Â  selectedPeriod,
Â  selectedStrategy,
}) => {
Â  const [showLayoutMenu, setShowLayoutMenu] = useState(false);
Â  const gridClass = getGridClass(layout);


Â  return (
Â  Â  <div className="flex flex-col h-full">
Â  Â  Â  <div className="flex items-center justify-between px-4 py-2 border-b border-[#2a2e39]">
Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  className="flex items-center gap-2 px-3 py-1.5 text-sm bg-[#2a2e39] rounded hover:bg-[#363c4e]"
Â  Â  Â  Â  Â  Â  onClick={() => setShowLayoutMenu(!showLayoutMenu)}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Layout <ChevronDown className="w-4 h-4" />
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  {showLayoutMenu && (
Â  Â  Â  Â  Â  Â  <div className="absolute top-full left-0 mt-1 bg-[#1A1A1A] border border-[#2a2e39] rounded shadow-lg z-50">
Â  Â  Â  Â  Â  Â  Â  {layoutOptions.map((option) => (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={option.id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="block w-full px-4 py-2 text-left text-sm hover:bg-[#2a2e39]"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Handle layout change
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setShowLayoutMenu(false);
Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {option.name}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  Â  <div className={`grid flex-1 gap-[1px] bg-[#2a2e39] ${gridClass}`}>
Â  Â  Â  Â  {symbols.map((symbol, index) => (
Â  Â  Â  Â  Â  <ChartInstance
Â  Â  Â  Â  Â  Â  key={`${symbol}-${index}`}
Â  Â  Â  Â  Â  Â  symbol={symbol}
Â  Â  Â  Â  Â  Â  selectedPeriod={selectedPeriod}
Â  Â  Â  Â  Â  Â  selectedStrategy={selectedStrategy}
Â  Â  Â  Â  Â  Â  index={index}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  ))}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

